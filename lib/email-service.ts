// Email service for sending notifications
// This is a mock implementation for demo purposes

interface EmailData {
  to: string
  subject: string
  html: string
  text: string
}

class EmailService {
  private static instance: EmailService
  private readonly adminEmail = "airplanenews4@gmail.com"

  static getInstance(): EmailService {
    if (!EmailService.instance) {
      EmailService.instance = new EmailService()
    }
    return EmailService.instance
  }

  async sendEarlyAccessRequest(userEmail: string): Promise<boolean> {
    const emailData: EmailData = {
      to: this.adminEmail,
      subject: "ðŸš€ New Early Access Request - Study Notes Platform",
      html: this.generateEarlyAccessHTML(userEmail),
      text: this.generateEarlyAccessText(userEmail),
    }

    return this.sendEmail(emailData)
  }

  private generateEarlyAccessHTML(userEmail: string): string {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>New Early Access Request</title>
      </head>
      <body style="margin: 0; padding: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background-color: #f8fafc;">
        <div style="max-width: 600px; margin: 0 auto; background-color: white; border-radius: 12px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); overflow: hidden;">
          
          <!-- Header -->
          <div style="background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%); padding: 30px; text-align: center;">
            <h1 style="color: white; margin: 0; font-size: 24px; font-weight: 600;">
              ðŸ“š Study Notes Platform
            </h1>
            <p style="color: #bfdbfe; margin: 8px 0 0 0; font-size: 16px;">
              New Early Access Request
            </p>
          </div>
          
          <!-- Content -->
          <div style="padding: 30px;">
            <div style="background-color: #f1f5f9; padding: 20px; border-radius: 8px; border-left: 4px solid #2563eb; margin-bottom: 25px;">
              <h2 style="color: #1e293b; margin: 0 0 15px 0; font-size: 18px;">Request Details</h2>
              <table style="width: 100%; border-collapse: collapse;">
                <tr>
                  <td style="padding: 8px 0; color: #64748b; font-weight: 500;">Email:</td>
                  <td style="padding: 8px 0; color: #1e293b; font-weight: 600;">${userEmail}</td>
                </tr>
                <tr>
                  <td style="padding: 8px 0; color: #64748b; font-weight: 500;">Date:</td>
                  <td style="padding: 8px 0; color: #1e293b;">${new Date().toLocaleDateString()}</td>
                </tr>
                <tr>
                  <td style="padding: 8px 0; color: #64748b; font-weight: 500;">Time:</td>
                  <td style="padding: 8px 0; color: #1e293b;">${new Date().toLocaleTimeString()}</td>
                </tr>
                <tr>
                  <td style="padding: 8px 0; color: #64748b; font-weight: 500;">Platform:</td>
                  <td style="padding: 8px 0; color: #1e293b;">Study Notes Repository</td>
                </tr>
              </table>
            </div>
            
            <div style="background-color: #ecfdf5; padding: 20px; border-radius: 8px; border-left: 4px solid #10b981; margin-bottom: 25px;">
              <h3 style="color: #065f46; margin: 0 0 10px 0; font-size: 16px;">âœ… Next Steps</h3>
              <ul style="color: #047857; margin: 0; padding-left: 20px;">
                <li style="margin-bottom: 5px;">Review the user's request</li>
                <li style="margin-bottom: 5px;">Generate an access code if approved</li>
                <li style="margin-bottom: 5px;">Send the access code to the user</li>
                <li>Update the approved users list</li>
              </ul>
            </div>
            
            <div style="text-align: center; margin-top: 30px;">
              <div style="display: inline-block; background-color: #2563eb; color: white; padding: 12px 24px; border-radius: 6px; text-decoration: none; font-weight: 500;">
                ðŸ“§ Sent to: ${this.adminEmail}
              </div>
            </div>
          </div>
          
          <!-- Footer -->
          <div style="background-color: #f8fafc; padding: 20px; text-align: center; border-top: 1px solid #e2e8f0;">
            <p style="color: #64748b; margin: 0; font-size: 14px;">
              This email was automatically generated by the Study Notes platform
            </p>
            <p style="color: #94a3b8; margin: 5px 0 0 0; font-size: 12px;">
              ${new Date().toISOString()}
            </p>
          </div>
        </div>
      </body>
      </html>
    `
  }

  private generateEarlyAccessText(userEmail: string): string {
    return `
Study Notes Platform - New Early Access Request

A new user has requested early access to the Study Notes platform.

Request Details:
- Email: ${userEmail}
- Date: ${new Date().toLocaleDateString()}
- Time: ${new Date().toLocaleTimeString()}
- Platform: Study Notes Repository

Next Steps:
âœ… Review the user's request
âœ… Generate an access code if approved  
âœ… Send the access code to the user
âœ… Update the approved users list

This email was sent to: ${this.adminEmail}
Generated at: ${new Date().toISOString()}

---
This email was automatically generated by the Study Notes platform.
    `
  }

  private async sendEmail(emailData: EmailData): Promise<boolean> {
    try {
      // In a real application, you would use an email service like:
      // - SendGrid: await sgMail.send(emailData)
      // - Mailgun: await mailgun.messages().send(emailData)
      // - Resend: await resend.emails.send(emailData)
      // - Nodemailer: await transporter.sendMail(emailData)

      // For demo purposes, we'll log the email details
      console.log("ðŸ“§ EMAIL NOTIFICATION SENT")
      console.log("=".repeat(50))
      console.log(`To: ${emailData.to}`)
      console.log(`Subject: ${emailData.subject}`)
      console.log(`Timestamp: ${new Date().toISOString()}`)
      console.log("=".repeat(50))
      console.log("Email Content Preview:")
      console.log(emailData.text)
      console.log("=".repeat(50))

      // Simulate API call delay
      await new Promise((resolve) => setTimeout(resolve, 300))

      return true
    } catch (error) {
      console.error("Failed to send email:", error)
      return false
    }
  }
}

export const emailService = EmailService.getInstance()
