// This is a mock early access service
// In a real app, you would connect to a database or API

// Mock waitlist and approved users
const waitlist: string[] = []
const approvedUsers = [
  {
    email: "beta@example.com",
    accessCode: "STUDY2023",
  },
  {
    email: "tester@example.com",
    accessCode: "NOTES1234",
  },
]

// Helper function to safely get cookie value
const getCookieValue = (name: string): string | null => {
  if (typeof document === "undefined") return null

  const cookies = document.cookie.split("; ")
  const cookie = cookies.find((row) => row.startsWith(`${name}=`))

  if (!cookie) return null

  const value = cookie.split("=")[1]
  return value && value !== "undefined" && value !== "" ? value : null
}

// Helper function to dispatch auth state change event
const dispatchAuthChange = () => {
  if (typeof window !== "undefined") {
    setTimeout(() => {
      window.dispatchEvent(new CustomEvent("authStateChanged"))
    }, 100)
  }
}

// Mock email service
const sendEmailNotification = async (userEmail: string): Promise<boolean> => {
  try {
    // In a real app, this would use a service like SendGrid, Mailgun, or Resend
    const emailData = {
      to: "airplanenews4@gmail.com",
      subject: "New Early Access Request - Study Notes Platform",
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #2563eb;">New Early Access Request</h2>
          <p>A new user has requested early access to the Study Notes platform.</p>
          
          <div style="background-color: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="margin-top: 0; color: #1e293b;">Request Details:</h3>
            <p><strong>Email:</strong> ${userEmail}</p>
            <p><strong>Requested At:</strong> ${new Date().toLocaleString()}</p>
            <p><strong>Platform:</strong> Study Notes Repository</p>
          </div>
          
          <div style="background-color: #dbeafe; padding: 15px; border-radius: 8px; border-left: 4px solid #2563eb;">
            <h4 style="margin-top: 0; color: #1e40af;">Next Steps:</h4>
            <p style="margin-bottom: 0;">Review the request and send an access code to the user if approved.</p>
          </div>
          
          <hr style="margin: 30px 0; border: none; border-top: 1px solid #e2e8f0;">
          
          <p style="color: #64748b; font-size: 14px;">
            This email was automatically generated by the Study Notes platform.<br>
            Time: ${new Date().toISOString()}
          </p>
        </div>
      `,
      text: `
New Early Access Request - Study Notes Platform

A new user has requested early access to the Study Notes platform.

Request Details:
- Email: ${userEmail}
- Requested At: ${new Date().toLocaleString()}
- Platform: Study Notes Repository

Next Steps:
Review the request and send an access code to the user if approved.

This email was automatically generated by the Study Notes platform.
Time: ${new Date().toISOString()}
      `,
    }

    // Log the email that would be sent (for demo purposes)
    console.log("ðŸ“§ Email would be sent to airplanenews4@gmail.com:")
    console.log("Subject:", emailData.subject)
    console.log("User Email:", userEmail)
    console.log("Timestamp:", new Date().toISOString())

    // In a real app, you would use an email service here:
    // await emailService.send(emailData)

    // Simulate network delay
    await new Promise((resolve) => setTimeout(resolve, 500))

    return true
  } catch (error) {
    console.error("Failed to send email notification:", error)
    return false
  }
}

export async function requestAccess(email: string): Promise<boolean> {
  // Simulate network delay
  await new Promise((resolve) => setTimeout(resolve, 1500))

  try {
    // Check if email is already in the waitlist
    if (waitlist.includes(email)) {
      return true
    }

    // Check if email is already approved
    const isApproved = approvedUsers.some((user) => user.email === email)
    if (isApproved) {
      return true
    }

    // Add to waitlist
    waitlist.push(email)

    // Send email notification to admin
    const emailSent = await sendEmailNotification(email)

    if (!emailSent) {
      console.warn("Email notification failed, but request was still processed")
    }

    // Store in localStorage for persistence (demo purposes)
    if (typeof window !== "undefined") {
      try {
        const existingRequests = JSON.parse(localStorage.getItem("early-access-requests") || "[]")
        const newRequest = {
          email,
          timestamp: new Date().toISOString(),
          status: "pending",
        }
        existingRequests.push(newRequest)
        localStorage.setItem("early-access-requests", JSON.stringify(existingRequests))
      } catch (error) {
        console.warn("Failed to store request in localStorage:", error)
      }
    }

    return true
  } catch (error) {
    console.error("Error processing access request:", error)
    return false
  }
}

export async function validateAccessCode(email: string, accessCode: string): Promise<boolean> {
  // Simulate network delay
  await new Promise((resolve) => setTimeout(resolve, 2000))

  // Check if email and access code match
  const user = approvedUsers.find((user) => user.email === email && user.accessCode === accessCode)

  if (user) {
    // Set early access cookies
    if (typeof document !== "undefined") {
      const userData = JSON.stringify({ name: "Early Access User", email: email })
      document.cookie = `early-access-token=${email}; path=/; max-age=${60 * 60 * 24 * 30}` // 30 days
      document.cookie = `user-data=${encodeURIComponent(userData)}; path=/; max-age=${60 * 60 * 24 * 30}`
    }

    // Dispatch auth change event
    dispatchAuthChange()

    return true
  }

  return false
}

export function getWaitlistCount(): number {
  return waitlist.length
}

// Helper function to get all requests (for admin purposes)
export function getAllRequests(): Array<{ email: string; timestamp: string; status: string }> {
  if (typeof window === "undefined") return []

  try {
    return JSON.parse(localStorage.getItem("early-access-requests") || "[]")
  } catch {
    return []
  }
}
